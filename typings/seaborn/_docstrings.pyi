"""
This type stub file was generated by pyright.
"""

class DocstringComponents:
    regexp = ...
    def __init__(self, comp_dict, strip_whitespace=...) -> None:
        """Read entries from a dict, optionally stripping outer whitespace."""
        ...
    
    def __getattr__(self, attr):
        """Provided dot access to entries."""
        ...
    
    @classmethod
    def from_nested_components(cls, **kwargs):
        """Add multiple sub-sets of components."""
        ...
    
    @classmethod
    def from_function_params(cls, func):
        """Use the numpydoc parser to extract components from existing func."""
        ...
    


_core_params = dict(data="""
data : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence
    Input data structure. Either a long-form collection of vectors that can be
    assigned to named variables or a wide-form dataset that will be internally
    reshaped.
    """, xy="""
x, y : vectors or keys in ``data``
    Variables that specify positions on the x and y axes.
    """, hue="""
hue : vector or key in ``data``
    Semantic variable that is mapped to determine the color of plot elements.
    """, palette="""
palette : string, list, dict, or :class:`matplotlib.colors.Colormap`
    Method for choosing the colors to use when mapping the ``hue`` semantic.
    String values are passed to :func:`color_palette`. List or dict values
    imply categorical mapping, while a colormap object implies numeric mapping.
    """, hue_order="""
hue_order : vector of strings
    Specify the order of processing and plotting for categorical levels of the
    ``hue`` semantic.
    """, hue_norm="""
hue_norm : tuple or :class:`matplotlib.colors.Normalize`
    Either a pair of values that set the normalization range in data units
    or an object that will map from data units into a [0, 1] interval. Usage
    implies numeric mapping.
    """, color="""
color : :mod:`matplotlib color <matplotlib.colors>`
    Single color specification for when hue mapping is not used. Otherwise, the
    plot will try to hook into the matplotlib property cycle.
    """, ax="""
ax : :class:`matplotlib.axes.Axes`
    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`
    internally.
    """)
_core_returns = dict(ax="""
:class:`matplotlib.axes.Axes`
    The matplotlib axes containing the plot.
    """, facetgrid="""
:class:`FacetGrid`
    An object managing one or more subplots that correspond to conditional data
    subsets with convenient methods for batch-setting of axes attributes.
    """, jointgrid="""
:class:`JointGrid`
    An object managing multiple subplots that correspond to joint and marginal axes
    for plotting a bivariate relationship or distribution.
    """, pairgrid="""
:class:`PairGrid`
    An object managing multiple subplots that correspond to joint and marginal axes
    for pairwise combinations of multiple variables in a dataset.
    """)
_seealso_blurbs = dict(scatterplot="""
scatterplot : Plot data using points.
    """, lineplot="""
lineplot : Plot data using lines.
    """, displot="""
displot : Figure-level interface to distribution plot functions.
    """, histplot="""
histplot : Plot a histogram of binned counts with optional normalization or smoothing.
    """, kdeplot="""
kdeplot : Plot univariate or bivariate distributions using kernel density estimation.
    """, ecdfplot="""
ecdfplot : Plot empirical cumulative distribution functions.
    """, rugplot="""
rugplot : Plot a tick at each observation value along the x and/or y axes.
    """, stripplot="""
stripplot : Plot a categorical scatter with jitter.
    """, swarmplot="""
swarmplot : Plot a categorical scatter with non-overlapping points.
    """, violinplot="""
violinplot : Draw an enhanced boxplot using kernel density estimation.
    """, pointplot="""
pointplot : Plot point estimates and CIs using markers and lines.
    """, jointplot="""
jointplot : Draw a bivariate plot with univariate marginal distributions.
    """, pairplot="""
jointplot : Draw multiple bivariate plots with univariate marginal distributions.
    """, jointgrid="""
JointGrid : Set up a figure with joint and marginal views on bivariate data.
    """, pairgrid="""
PairGrid : Set up a figure with joint and marginal views on multiple variables.
    """)
_core_docs = dict(params=DocstringComponents(_core_params), returns=DocstringComponents(_core_returns), seealso=DocstringComponents(_seealso_blurbs))
