"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from typing import List
from ..base import BaseEstimator, MetaEstimatorMixin
from ..utils.metaestimators import _BaseComposition

"""Base class for ensemble-based estimators."""
class BaseEnsemble(MetaEstimatorMixin, BaseEstimator, metaclass=ABCMeta):
    """Base class for all ensemble classes.

    Warning: This class should not be used directly. Use derived classes
    instead.

    Parameters
    ----------
    base_estimator : object
        The base estimator from which the ensemble is built.

    n_estimators : int, default=10
        The number of estimators in the ensemble.

    estimator_params : list of str, default=tuple()
        The list of attributes to use as parameters when instantiating a
        new base estimator. If none are given, default parameters are used.

    Attributes
    ----------
    base_estimator_ : estimator
        The base estimator from which the ensemble is grown.

    estimators_ : list of estimators
        The collection of fitted base estimators.
    """
    _required_parameters: , = ...
    @abstractmethod
    def __init__(self, base_estimator, *, n_estimators=..., estimator_params=...) -> None:
        ...
    
    def __len__(self):
        """Return the number of estimators in the ensemble."""
        ...
    
    def __getitem__(self, index):
        """Return the index'th estimator in the ensemble."""
        ...
    
    def __iter__(self):
        """Return iterator over estimators in the ensemble."""
        ...
    


class _BaseHeterogeneousEnsemble(MetaEstimatorMixin, _BaseComposition, metaclass=ABCMeta):
    """Base class for heterogeneous ensemble of learners.

    Parameters
    ----------
    estimators : list of (str, estimator) tuples
        The ensemble of estimators to use in the ensemble. Each element of the
        list is defined as a tuple of string (i.e. name of the estimator) and
        an estimator instance. An estimator can be set to `'drop'` using
        `set_params`.

    Attributes
    ----------
    estimators_ : list of estimators
        The elements of the estimators parameter, having been fitted on the
        training data. If an estimator has been set to `'drop'`, it will not
        appear in `estimators_`.
    """
    _required_parameters = ...
    @property
    def named_estimators(self):
        ...
    
    @abstractmethod
    def __init__(self, estimators) -> None:
        ...
    
    def set_params(self, **params):
        """
        Set the parameters of an estimator from the ensemble.

        Valid parameter keys can be listed with `get_params()`. Note that you
        can directly set the parameters of the estimators contained in
        `estimators`.

        Parameters
        ----------
        **params : keyword arguments
            Specific parameters using e.g.
            `set_params(parameter_name=new_value)`. In addition, to setting the
            parameters of the estimator, the individual estimator of the
            estimators can also be set, or can be removed by setting them to
            'drop'.
        """
        ...
    
    def get_params(self, deep=...):
        """
        Get the parameters of an estimator from the ensemble.

        Returns the parameters given in the constructor as well as the
        estimators contained within the `estimators` parameter.

        Parameters
        ----------
        deep : bool, default=True
            Setting it to True gets the various estimators and the parameters
            of the estimators as well.
        """
        ...
    


